c
self.class
@user.class
user.class
User.class
self.class
self.class.digest(remember_token)
c
self.remember_token = self.class.new_token
c
remember_token
self.class.digest(remember_token)
digest
remember(user)
c
BCrypt::Password.create("string", cost: cost)
BCrypt::Password.create(string, cost: cost)
BCrypt::Password.create(cost: cost)
BCrypt::Password.create(integer, cost: cost)
BCrypt::Password.create(string, cost: cost)
cost = ActiveModel::SecurePassword.min_cost ? BCrypt::Engine::MIN_COST : BCrypt::Engine.cost
        BCrypt::Password.create(string, cost: cost)
cost = ActiveModel::SecurePassword.min_cost 
self.class.digest
self.class.digest(remember_token)
self.class.digest(remember_token))
self.remember_token
self.remember_token = self.class.new_token
self.remember_token
self.class.digest(remember_token)
elf.class.digest(remember_token)
self.class.new_token
c
self.class.digest(remember_token)
remember_token
self.class.new_token
c
User.find_by!(id: params[:id])
User.find_by!(slug: params[:id])
params[:id]
User.find_by!(params[:id])
slug
slug:
params[:id]
param[:id]
User.find_by!(slug: params[:id])
SELECT "users".* FROM "users" WHERE "users"."slug" = 5
SELECT "users".* FROM "users" WHERE "users"."slug" = $1 LIMIT $2  [["slug", "6"], ["LIMIT", 1]]
User.find_by!(slug: params[:id])
User.find_by!(params[:id])
User.find_by!(slug: params[:id])
c
edit_user_path(current_user)
c
quit
logged_in_user
:logged_in_user
quit
current_user
continue
@user.save!
@user
continue
@user.save!
@user.password = user_params[:password]
user_params
@user.save!
@user
continue
user_params
